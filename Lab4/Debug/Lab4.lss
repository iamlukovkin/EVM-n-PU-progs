
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  00800102  00800102  00000782  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d6  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000757  00000000  00000000  00001246  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044c  00000000  00000000  0000199d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  000022d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000023e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 01 	call	0x336	; 0x336 <main>
  9e:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
void LED_On() {
    PORTB |= (1 << PB5); // Turn on the LED (PortB5)
}

void LED_Off() {
    PORTB &= ~(1 << PB5); // Turn off the LED (PortB5)
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b2:	88 e9       	ldi	r24, 0x98	; 152
  b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  be:	08 95       	ret

000000c0 <USART_Transmit>:
  c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c4:	95 ff       	sbrs	r25, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <USART_Transmit>
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret

000000ce <perform_full_reset>:
	data_index++;
}

void perform_full_reset() {
    // Disable all interrupts
    cli();
  ce:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	a8 95       	wdr
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  da:	88 61       	ori	r24, 0x18	; 24
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  e4:	0f be       	out	0x3f, r0	; 63
    
    // Disable the watchdog timer to prevent automatic resets
    wdt_disable();
    
    // Perform a software reset
    asm volatile("jmp 0");
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  ea:	08 95       	ret

000000ec <__vector_18>:

void LED_Off() {
    PORTB &= ~(1 << PB5); // Turn off the LED (PortB5)
}

ISR(USART_RX_vect) {
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	1f 92       	push	r1
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
    char receivedByte = UDR0; // Get the received byte
 11c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 120:	89 83       	std	Y+1, r24	; 0x01

    if (data_index == 0) {
 122:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data_index>
 126:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data_index+0x1>
 12a:	23 2b       	or	r18, r19
 12c:	49 f4       	brne	.+18     	; 0x140 <__vector_18+0x54>
		if (receivedByte != 'F') {
 12e:	86 34       	cpi	r24, 0x46	; 70
 130:	09 f4       	brne	.+2      	; 0x134 <__vector_18+0x48>
 132:	e2 c0       	rjmp	.+452    	; 0x2f8 <__vector_18+0x20c>
			error_flag = true;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <error_flag>
			perform_full_reset();
 13a:	0e 94 67 00 	call	0xce	; 0xce <perform_full_reset>
			return;
 13e:	e5 c0       	rjmp	.+458    	; 0x30a <__vector_18+0x21e>
		}
    } else if (data_index == 1) {
 140:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data_index>
 144:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data_index+0x1>
 148:	21 30       	cpi	r18, 0x01	; 1
 14a:	31 05       	cpc	r19, r1
 14c:	49 f4       	brne	.+18     	; 0x160 <__vector_18+0x74>
		if (receivedByte != 'F') {
 14e:	86 34       	cpi	r24, 0x46	; 70
 150:	09 f4       	brne	.+2      	; 0x154 <__vector_18+0x68>
 152:	d2 c0       	rjmp	.+420    	; 0x2f8 <__vector_18+0x20c>
			error_flag = true;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <error_flag>
			perform_full_reset();
 15a:	0e 94 67 00 	call	0xce	; 0xce <perform_full_reset>
			return;
 15e:	d5 c0       	rjmp	.+426    	; 0x30a <__vector_18+0x21e>
		}
    } else if (data_index == 2) {
 160:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data_index>
 164:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data_index+0x1>
 168:	22 30       	cpi	r18, 0x02	; 2
 16a:	31 05       	cpc	r19, r1
 16c:	59 f4       	brne	.+22     	; 0x184 <__vector_18+0x98>
		 if (receivedByte != my_adr[0]) {
 16e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	89 17       	cp	r24, r25
 174:	09 f4       	brne	.+2      	; 0x178 <__vector_18+0x8c>
 176:	c0 c0       	rjmp	.+384    	; 0x2f8 <__vector_18+0x20c>
			 error_flag = true;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <error_flag>
			 perform_full_reset();
 17e:	0e 94 67 00 	call	0xce	; 0xce <perform_full_reset>
			return;
 182:	c3 c0       	rjmp	.+390    	; 0x30a <__vector_18+0x21e>
		 } 
    } else if (data_index == 3) {
 184:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data_index>
 188:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data_index+0x1>
 18c:	23 30       	cpi	r18, 0x03	; 3
 18e:	31 05       	cpc	r19, r1
 190:	59 f4       	brne	.+22     	; 0x1a8 <__vector_18+0xbc>
		if (receivedByte != my_adr[1]) {
 192:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 196:	89 17       	cp	r24, r25
 198:	09 f4       	brne	.+2      	; 0x19c <__vector_18+0xb0>
 19a:	ae c0       	rjmp	.+348    	; 0x2f8 <__vector_18+0x20c>
			error_flag = true;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <error_flag>
			perform_full_reset();
 1a2:	0e 94 67 00 	call	0xce	; 0xce <perform_full_reset>
			return;
 1a6:	b1 c0       	rjmp	.+354    	; 0x30a <__vector_18+0x21e>
		}
	} else if (data_index == 6) {
 1a8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data_index>
 1ac:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data_index+0x1>
 1b0:	26 30       	cpi	r18, 0x06	; 6
 1b2:	31 05       	cpc	r19, r1
 1b4:	19 f5       	brne	.+70     	; 0x1fc <__vector_18+0x110>

		data_length = strtol(&receivedByte, NULL, 16) << 4; // Преобразование первого полубайта и сдвиг на 4 бита влево
 1b6:	40 e1       	ldi	r20, 0x10	; 16
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	ce 01       	movw	r24, r28
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	0e 94 cf 01 	call	0x39e	; 0x39e <strtol>
 1c6:	dc 01       	movw	r26, r24
 1c8:	cb 01       	movw	r24, r22
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	aa 1f       	adc	r26, r26
 1d0:	bb 1f       	adc	r27, r27
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	aa 1f       	adc	r26, r26
 1d8:	bb 1f       	adc	r27, r27
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <data_length>
 1ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <data_length+0x1>
 1f2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <data_length+0x2>
 1f6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <data_length+0x3>
 1fa:	7e c0       	rjmp	.+252    	; 0x2f8 <__vector_18+0x20c>
	} else if (data_index == 7) {
 1fc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data_index>
 200:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data_index+0x1>
 204:	27 30       	cpi	r18, 0x07	; 7
 206:	31 05       	cpc	r19, r1
 208:	19 f5       	brne	.+70     	; 0x250 <__vector_18+0x164>
		data_length |= strtol(&receivedByte, NULL, 16) ;  
 20a:	40 e1       	ldi	r20, 0x10	; 16
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	0e 94 cf 01 	call	0x39e	; 0x39e <strtol>
 21a:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <data_length>
 21e:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <data_length+0x1>
 222:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <data_length+0x2>
 226:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <data_length+0x3>
 22a:	dc 01       	movw	r26, r24
 22c:	cb 01       	movw	r24, r22
 22e:	80 2b       	or	r24, r16
 230:	91 2b       	or	r25, r17
 232:	a2 2b       	or	r26, r18
 234:	b3 2b       	or	r27, r19
		data_length *= 2;
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <data_length>
 242:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <data_length+0x1>
 246:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <data_length+0x2>
 24a:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <data_length+0x3>
 24e:	54 c0       	rjmp	.+168    	; 0x2f8 <__vector_18+0x20c>
    } else if (data_index >= 8 && data_counter < data_length) {
 250:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data_index>
 254:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data_index+0x1>
 258:	28 30       	cpi	r18, 0x08	; 8
 25a:	31 05       	cpc	r19, r1
 25c:	64 f1       	brlt	.+88     	; 0x2b6 <__vector_18+0x1ca>
 25e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 262:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 266:	05 2e       	mov	r0, r21
 268:	00 0c       	add	r0, r0
 26a:	66 0b       	sbc	r22, r22
 26c:	77 0b       	sbc	r23, r23
 26e:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <data_length>
 272:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <data_length+0x1>
 276:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <data_length+0x2>
 27a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <data_length+0x3>
 27e:	40 17       	cp	r20, r16
 280:	51 07       	cpc	r21, r17
 282:	62 07       	cpc	r22, r18
 284:	73 07       	cpc	r23, r19
 286:	bc f4       	brge	.+46     	; 0x2b6 <__vector_18+0x1ca>
        received_data[data_counter] = receivedByte;
 288:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 28c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
 290:	e4 5f       	subi	r30, 0xF4	; 244
 292:	fe 4f       	sbci	r31, 0xFE	; 254
 294:	80 83       	st	Z, r24
        data_counter++;
 296:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 29a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		data_index = 9;	
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <data_index+0x1>
 2b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <data_index>
 2b4:	21 c0       	rjmp	.+66     	; 0x2f8 <__vector_18+0x20c>
    } else if ( data_index == 10) {
 2b6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data_index>
 2ba:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data_index+0x1>
 2be:	2a 30       	cpi	r18, 0x0A	; 10
 2c0:	31 05       	cpc	r19, r1
 2c2:	41 f4       	brne	.+16     	; 0x2d4 <__vector_18+0x1e8>
		if (receivedByte != '8') {
 2c4:	88 33       	cpi	r24, 0x38	; 56
 2c6:	c1 f0       	breq	.+48     	; 0x2f8 <__vector_18+0x20c>
			error_flag = true;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <error_flag>
			perform_full_reset();
 2ce:	0e 94 67 00 	call	0xce	; 0xce <perform_full_reset>
			return;
 2d2:	1b c0       	rjmp	.+54     	; 0x30a <__vector_18+0x21e>
		}
	} else if (data_index == 11) {
 2d4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data_index>
 2d8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data_index+0x1>
 2dc:	2b 30       	cpi	r18, 0x0B	; 11
 2de:	31 05       	cpc	r19, r1
 2e0:	59 f4       	brne	.+22     	; 0x2f8 <__vector_18+0x20c>
		if (receivedByte != '0') {
 2e2:	80 33       	cpi	r24, 0x30	; 48
 2e4:	31 f0       	breq	.+12     	; 0x2f2 <__vector_18+0x206>
			error_flag = true;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <error_flag>
			perform_full_reset();
 2ec:	0e 94 67 00 	call	0xce	; 0xce <perform_full_reset>
			return;
 2f0:	0c c0       	rjmp	.+24     	; 0x30a <__vector_18+0x21e>
		} else {
			data_ready = true;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <data_ready>
		}
	}
	data_index++;
 2f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <data_index>
 2fc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <data_index+0x1>
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <data_index+0x1>
 306:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <data_index>
}
 30a:	0f 90       	pop	r0
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <main>:
    asm volatile("jmp 0");
}

int main() {
    // Set up port B5 (LED) as an output
    DDRB |= (1 << DDB5);
 336:	84 b1       	in	r24, 0x04	; 4
 338:	80 62       	ori	r24, 0x20	; 32
 33a:	84 b9       	out	0x04, r24	; 4

    // Initialize USART
    USART_Init();
 33c:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>

    // Enable global interrupts
    sei();
 340:	78 94       	sei

    while (1) {
        if (data_ready && !error_flag) {
 342:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data_ready>
 346:	88 23       	and	r24, r24
 348:	e1 f3       	breq	.-8      	; 0x342 <main+0xc>
 34a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <error_flag>
 34e:	81 11       	cpse	r24, r1
 350:	f8 cf       	rjmp	.-16     	; 0x342 <main+0xc>
 352:	c0 e0       	ldi	r28, 0x00	; 0
 354:	d0 e0       	ldi	r29, 0x00	; 0
 356:	07 c0       	rjmp	.+14     	; 0x366 <main+0x30>
			for (int i = 0; i < data_length; i++) {
				USART_Transmit(received_data[i]);
 358:	fe 01       	movw	r30, r28
 35a:	e4 5f       	subi	r30, 0xF4	; 244
 35c:	fe 4f       	sbci	r31, 0xFE	; 254
 35e:	80 81       	ld	r24, Z
 360:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_Transmit>
    // Enable global interrupts
    sei();

    while (1) {
        if (data_ready && !error_flag) {
			for (int i = 0; i < data_length; i++) {
 364:	21 96       	adiw	r28, 0x01	; 1
 366:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <data_length>
 36a:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <data_length+0x1>
 36e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <data_length+0x2>
 372:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <data_length+0x3>
 376:	ce 01       	movw	r24, r28
 378:	0d 2e       	mov	r0, r29
 37a:	00 0c       	add	r0, r0
 37c:	aa 0b       	sbc	r26, r26
 37e:	bb 0b       	sbc	r27, r27
 380:	84 17       	cp	r24, r20
 382:	95 07       	cpc	r25, r21
 384:	a6 07       	cpc	r26, r22
 386:	b7 07       	cpc	r27, r23
 388:	3c f3       	brlt	.-50     	; 0x358 <main+0x22>
				USART_Transmit(received_data[i]);
			}
			USART_Transmit('\n');
 38a:	8a e0       	ldi	r24, 0x0A	; 10
 38c:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_Transmit>
			data_index = 0;
 390:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <data_index+0x1>
 394:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <data_index>

            data_ready = false; // Reset the flag
 398:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <data_ready>
 39c:	d2 cf       	rjmp	.-92     	; 0x342 <main+0xc>

0000039e <strtol>:
 39e:	a0 e0       	ldi	r26, 0x00	; 0
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e5 ed       	ldi	r30, 0xD5	; 213
 3a4:	f1 e0       	ldi	r31, 0x01	; 1
 3a6:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__prologue_saves__+0x2>
 3aa:	5c 01       	movw	r10, r24
 3ac:	6b 01       	movw	r12, r22
 3ae:	7a 01       	movw	r14, r20
 3b0:	61 15       	cp	r22, r1
 3b2:	71 05       	cpc	r23, r1
 3b4:	19 f0       	breq	.+6      	; 0x3bc <strtol+0x1e>
 3b6:	fb 01       	movw	r30, r22
 3b8:	91 83       	std	Z+1, r25	; 0x01
 3ba:	80 83       	st	Z, r24
 3bc:	e1 14       	cp	r14, r1
 3be:	f1 04       	cpc	r15, r1
 3c0:	29 f0       	breq	.+10     	; 0x3cc <strtol+0x2e>
 3c2:	c7 01       	movw	r24, r14
 3c4:	02 97       	sbiw	r24, 0x02	; 2
 3c6:	83 97       	sbiw	r24, 0x23	; 35
 3c8:	08 f0       	brcs	.+2      	; 0x3cc <strtol+0x2e>
 3ca:	e5 c0       	rjmp	.+458    	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
 3cc:	e5 01       	movw	r28, r10
 3ce:	21 96       	adiw	r28, 0x01	; 1
 3d0:	f5 01       	movw	r30, r10
 3d2:	10 81       	ld	r17, Z
 3d4:	81 2f       	mov	r24, r17
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <isspace>
 3dc:	89 2b       	or	r24, r25
 3de:	11 f0       	breq	.+4      	; 0x3e4 <strtol+0x46>
 3e0:	5e 01       	movw	r10, r28
 3e2:	f4 cf       	rjmp	.-24     	; 0x3cc <strtol+0x2e>
 3e4:	1d 32       	cpi	r17, 0x2D	; 45
 3e6:	29 f4       	brne	.+10     	; 0x3f2 <strtol+0x54>
 3e8:	21 96       	adiw	r28, 0x01	; 1
 3ea:	f5 01       	movw	r30, r10
 3ec:	11 81       	ldd	r17, Z+1	; 0x01
 3ee:	01 e0       	ldi	r16, 0x01	; 1
 3f0:	07 c0       	rjmp	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f2:	1b 32       	cpi	r17, 0x2B	; 43
 3f4:	21 f4       	brne	.+8      	; 0x3fe <strtol+0x60>
 3f6:	e5 01       	movw	r28, r10
 3f8:	22 96       	adiw	r28, 0x02	; 2
 3fa:	f5 01       	movw	r30, r10
 3fc:	11 81       	ldd	r17, Z+1	; 0x01
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	e1 14       	cp	r14, r1
 402:	f1 04       	cpc	r15, r1
 404:	09 f1       	breq	.+66     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 406:	f0 e1       	ldi	r31, 0x10	; 16
 408:	ef 16       	cp	r14, r31
 40a:	f1 04       	cpc	r15, r1
 40c:	29 f4       	brne	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40e:	3f c0       	rjmp	.+126    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 410:	10 e3       	ldi	r17, 0x30	; 48
 412:	e1 14       	cp	r14, r1
 414:	f1 04       	cpc	r15, r1
 416:	21 f1       	breq	.+72     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 418:	28 e0       	ldi	r18, 0x08	; 8
 41a:	e2 16       	cp	r14, r18
 41c:	f1 04       	cpc	r15, r1
 41e:	01 f1       	breq	.+64     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 420:	54 f4       	brge	.+20     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 422:	e2 e0       	ldi	r30, 0x02	; 2
 424:	ee 16       	cp	r14, r30
 426:	f1 04       	cpc	r15, r1
 428:	21 f5       	brne	.+72     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 42a:	81 2c       	mov	r8, r1
 42c:	91 2c       	mov	r9, r1
 42e:	a1 2c       	mov	r10, r1
 430:	b0 e4       	ldi	r27, 0x40	; 64
 432:	bb 2e       	mov	r11, r27
 434:	3e c0       	rjmp	.+124    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 436:	fa e0       	ldi	r31, 0x0A	; 10
 438:	ef 16       	cp	r14, r31
 43a:	f1 04       	cpc	r15, r1
 43c:	39 f0       	breq	.+14     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 43e:	20 e1       	ldi	r18, 0x10	; 16
 440:	e2 16       	cp	r14, r18
 442:	f1 04       	cpc	r15, r1
 444:	b1 f4       	brne	.+44     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 446:	30 c0       	rjmp	.+96     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 448:	10 33       	cpi	r17, 0x30	; 48
 44a:	19 f1       	breq	.+70     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 44c:	fa e0       	ldi	r31, 0x0A	; 10
 44e:	ef 2e       	mov	r14, r31
 450:	f1 2c       	mov	r15, r1
 452:	ac ec       	ldi	r26, 0xCC	; 204
 454:	8a 2e       	mov	r8, r26
 456:	98 2c       	mov	r9, r8
 458:	a8 2c       	mov	r10, r8
 45a:	ac e0       	ldi	r26, 0x0C	; 12
 45c:	ba 2e       	mov	r11, r26
 45e:	29 c0       	rjmp	.+82     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 460:	78 e0       	ldi	r23, 0x08	; 8
 462:	e7 2e       	mov	r14, r23
 464:	f1 2c       	mov	r15, r1
 466:	81 2c       	mov	r8, r1
 468:	91 2c       	mov	r9, r1
 46a:	a1 2c       	mov	r10, r1
 46c:	e0 e1       	ldi	r30, 0x10	; 16
 46e:	be 2e       	mov	r11, r30
 470:	20 c0       	rjmp	.+64     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e8       	ldi	r25, 0x80	; 128
 47a:	97 01       	movw	r18, r14
 47c:	0f 2c       	mov	r0, r15
 47e:	00 0c       	add	r0, r0
 480:	44 0b       	sbc	r20, r20
 482:	55 0b       	sbc	r21, r21
 484:	0e 94 01 03 	call	0x602	; 0x602 <__udivmodsi4>
 488:	49 01       	movw	r8, r18
 48a:	5a 01       	movw	r10, r20
 48c:	12 c0       	rjmp	.+36     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 48e:	10 33       	cpi	r17, 0x30	; 48
 490:	59 f4       	brne	.+22     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 492:	88 81       	ld	r24, Y
 494:	8f 7d       	andi	r24, 0xDF	; 223
 496:	88 35       	cpi	r24, 0x58	; 88
 498:	09 f0       	breq	.+2      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49a:	ba cf       	rjmp	.-140    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 49c:	19 81       	ldd	r17, Y+1	; 0x01
 49e:	22 96       	adiw	r28, 0x02	; 2
 4a0:	02 60       	ori	r16, 0x02	; 2
 4a2:	80 e1       	ldi	r24, 0x10	; 16
 4a4:	e8 2e       	mov	r14, r24
 4a6:	f1 2c       	mov	r15, r1
 4a8:	81 2c       	mov	r8, r1
 4aa:	91 2c       	mov	r9, r1
 4ac:	a1 2c       	mov	r10, r1
 4ae:	68 e0       	ldi	r22, 0x08	; 8
 4b0:	b6 2e       	mov	r11, r22
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	cb 01       	movw	r24, r22
 4ba:	27 01       	movw	r4, r14
 4bc:	0f 2c       	mov	r0, r15
 4be:	00 0c       	add	r0, r0
 4c0:	66 08       	sbc	r6, r6
 4c2:	77 08       	sbc	r7, r7
 4c4:	fe 01       	movw	r30, r28
 4c6:	50 ed       	ldi	r21, 0xD0	; 208
 4c8:	35 2e       	mov	r3, r21
 4ca:	31 0e       	add	r3, r17
 4cc:	29 e0       	ldi	r18, 0x09	; 9
 4ce:	23 15       	cp	r18, r3
 4d0:	70 f4       	brcc	.+28     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4d2:	2f eb       	ldi	r18, 0xBF	; 191
 4d4:	21 0f       	add	r18, r17
 4d6:	2a 31       	cpi	r18, 0x1A	; 26
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4da:	39 ec       	ldi	r19, 0xC9	; 201
 4dc:	33 2e       	mov	r3, r19
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4e0:	2f e9       	ldi	r18, 0x9F	; 159
 4e2:	21 0f       	add	r18, r17
 4e4:	2a 31       	cpi	r18, 0x1A	; 26
 4e6:	18 f5       	brcc	.+70     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 4e8:	29 ea       	ldi	r18, 0xA9	; 169
 4ea:	32 2e       	mov	r3, r18
 4ec:	31 0e       	add	r3, r17
 4ee:	23 2d       	mov	r18, r3
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	2e 15       	cp	r18, r14
 4f4:	3f 05       	cpc	r19, r15
 4f6:	dc f4       	brge	.+54     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 4f8:	47 fd       	sbrc	r20, 7
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 4fc:	86 16       	cp	r8, r22
 4fe:	97 06       	cpc	r9, r23
 500:	a8 06       	cpc	r10, r24
 502:	b9 06       	cpc	r11, r25
 504:	70 f0       	brcs	.+28     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 506:	a3 01       	movw	r20, r6
 508:	92 01       	movw	r18, r4
 50a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsi3>
 50e:	63 0d       	add	r22, r3
 510:	71 1d       	adc	r23, r1
 512:	81 1d       	adc	r24, r1
 514:	91 1d       	adc	r25, r1
 516:	61 30       	cpi	r22, 0x01	; 1
 518:	71 05       	cpc	r23, r1
 51a:	81 05       	cpc	r24, r1
 51c:	20 e8       	ldi	r18, 0x80	; 128
 51e:	92 07       	cpc	r25, r18
 520:	10 f0       	brcs	.+4      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 522:	4f ef       	ldi	r20, 0xFF	; 255
 524:	01 c0       	rjmp	.+2      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	21 96       	adiw	r28, 0x01	; 1
 52a:	10 81       	ld	r17, Z
 52c:	cb cf       	rjmp	.-106    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 52e:	20 2f       	mov	r18, r16
 530:	21 70       	andi	r18, 0x01	; 1
 532:	c1 14       	cp	r12, r1
 534:	d1 04       	cpc	r13, r1
 536:	71 f0       	breq	.+28     	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 538:	44 23       	and	r20, r20
 53a:	29 f0       	breq	.+10     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 53c:	21 97       	sbiw	r28, 0x01	; 1
 53e:	f6 01       	movw	r30, r12
 540:	d1 83       	std	Z+1, r29	; 0x01
 542:	c0 83       	st	Z, r28
 544:	07 c0       	rjmp	.+14     	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 546:	01 ff       	sbrs	r16, 1
 548:	19 c0       	rjmp	.+50     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 54a:	22 97       	sbiw	r28, 0x02	; 2
 54c:	f6 01       	movw	r30, r12
 54e:	d1 83       	std	Z+1, r29	; 0x01
 550:	c0 83       	st	Z, r28
 552:	14 c0       	rjmp	.+40     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 554:	47 ff       	sbrs	r20, 7
 556:	12 c0       	rjmp	.+36     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 558:	22 23       	and	r18, r18
 55a:	29 f0       	breq	.+10     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e8       	ldi	r25, 0x80	; 128
 564:	04 c0       	rjmp	.+8      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 566:	6f ef       	ldi	r22, 0xFF	; 255
 568:	7f ef       	ldi	r23, 0xFF	; 255
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	9f e7       	ldi	r25, 0x7F	; 127
 56e:	22 e2       	ldi	r18, 0x22	; 34
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	30 93 0c 02 	sts	0x020C, r19	; 0x80020c <errno+0x1>
 576:	20 93 0b 02 	sts	0x020B, r18	; 0x80020b <errno>
 57a:	09 c0       	rjmp	.+18     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 57c:	22 23       	and	r18, r18
 57e:	81 f0       	breq	.+32     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 580:	90 95       	com	r25
 582:	80 95       	com	r24
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	46 2f       	mov	r20, r22
 590:	37 2f       	mov	r19, r23
 592:	28 2f       	mov	r18, r24
 594:	12 c0       	rjmp	.+36     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0d c0       	rjmp	.+26     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
 5a0:	97 ff       	sbrs	r25, 7
 5a2:	f5 cf       	rjmp	.-22     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 5a4:	82 e2       	ldi	r24, 0x22	; 34
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <errno+0x1>
 5ac:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <errno>
 5b0:	6f ef       	ldi	r22, 0xFF	; 255
 5b2:	7f ef       	ldi	r23, 0xFF	; 255
 5b4:	8f ef       	ldi	r24, 0xFF	; 255
 5b6:	9f e7       	ldi	r25, 0x7F	; 127
 5b8:	ea cf       	rjmp	.-44     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 5ba:	64 2f       	mov	r22, r20
 5bc:	73 2f       	mov	r23, r19
 5be:	82 2f       	mov	r24, r18
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	e1 e1       	ldi	r30, 0x11	; 17
 5c6:	0c 94 4b 03 	jmp	0x696	; 0x696 <__epilogue_restores__+0x2>

000005ca <isspace>:
 5ca:	91 11       	cpse	r25, r1
 5cc:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__ctype_isfalse>
 5d0:	80 32       	cpi	r24, 0x20	; 32
 5d2:	19 f0       	breq	.+6      	; 0x5da <isspace+0x10>
 5d4:	89 50       	subi	r24, 0x09	; 9
 5d6:	85 50       	subi	r24, 0x05	; 5
 5d8:	c8 f7       	brcc	.-14     	; 0x5cc <isspace+0x2>
 5da:	08 95       	ret

000005dc <__ctype_isfalse>:
 5dc:	99 27       	eor	r25, r25
 5de:	88 27       	eor	r24, r24

000005e0 <__ctype_istrue>:
 5e0:	08 95       	ret

000005e2 <__mulsi3>:
 5e2:	db 01       	movw	r26, r22
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	0e 94 23 03 	call	0x646	; 0x646 <__muluhisi3>
 5ec:	bf 91       	pop	r27
 5ee:	af 91       	pop	r26
 5f0:	a2 9f       	mul	r26, r18
 5f2:	80 0d       	add	r24, r0
 5f4:	91 1d       	adc	r25, r1
 5f6:	a3 9f       	mul	r26, r19
 5f8:	90 0d       	add	r25, r0
 5fa:	b2 9f       	mul	r27, r18
 5fc:	90 0d       	add	r25, r0
 5fe:	11 24       	eor	r1, r1
 600:	08 95       	ret

00000602 <__udivmodsi4>:
 602:	a1 e2       	ldi	r26, 0x21	; 33
 604:	1a 2e       	mov	r1, r26
 606:	aa 1b       	sub	r26, r26
 608:	bb 1b       	sub	r27, r27
 60a:	fd 01       	movw	r30, r26
 60c:	0d c0       	rjmp	.+26     	; 0x628 <__udivmodsi4_ep>

0000060e <__udivmodsi4_loop>:
 60e:	aa 1f       	adc	r26, r26
 610:	bb 1f       	adc	r27, r27
 612:	ee 1f       	adc	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	a2 17       	cp	r26, r18
 618:	b3 07       	cpc	r27, r19
 61a:	e4 07       	cpc	r30, r20
 61c:	f5 07       	cpc	r31, r21
 61e:	20 f0       	brcs	.+8      	; 0x628 <__udivmodsi4_ep>
 620:	a2 1b       	sub	r26, r18
 622:	b3 0b       	sbc	r27, r19
 624:	e4 0b       	sbc	r30, r20
 626:	f5 0b       	sbc	r31, r21

00000628 <__udivmodsi4_ep>:
 628:	66 1f       	adc	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	88 1f       	adc	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	1a 94       	dec	r1
 632:	69 f7       	brne	.-38     	; 0x60e <__udivmodsi4_loop>
 634:	60 95       	com	r22
 636:	70 95       	com	r23
 638:	80 95       	com	r24
 63a:	90 95       	com	r25
 63c:	9b 01       	movw	r18, r22
 63e:	ac 01       	movw	r20, r24
 640:	bd 01       	movw	r22, r26
 642:	cf 01       	movw	r24, r30
 644:	08 95       	ret

00000646 <__muluhisi3>:
 646:	0e 94 65 03 	call	0x6ca	; 0x6ca <__umulhisi3>
 64a:	a5 9f       	mul	r26, r21
 64c:	90 0d       	add	r25, r0
 64e:	b4 9f       	mul	r27, r20
 650:	90 0d       	add	r25, r0
 652:	a4 9f       	mul	r26, r20
 654:	80 0d       	add	r24, r0
 656:	91 1d       	adc	r25, r1
 658:	11 24       	eor	r1, r1
 65a:	08 95       	ret

0000065c <__prologue_saves__>:
 65c:	2f 92       	push	r2
 65e:	3f 92       	push	r3
 660:	4f 92       	push	r4
 662:	5f 92       	push	r5
 664:	6f 92       	push	r6
 666:	7f 92       	push	r7
 668:	8f 92       	push	r8
 66a:	9f 92       	push	r9
 66c:	af 92       	push	r10
 66e:	bf 92       	push	r11
 670:	cf 92       	push	r12
 672:	df 92       	push	r13
 674:	ef 92       	push	r14
 676:	ff 92       	push	r15
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	ca 1b       	sub	r28, r26
 686:	db 0b       	sbc	r29, r27
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	f8 94       	cli
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	0f be       	out	0x3f, r0	; 63
 690:	cd bf       	out	0x3d, r28	; 61
 692:	09 94       	ijmp

00000694 <__epilogue_restores__>:
 694:	2a 88       	ldd	r2, Y+18	; 0x12
 696:	39 88       	ldd	r3, Y+17	; 0x11
 698:	48 88       	ldd	r4, Y+16	; 0x10
 69a:	5f 84       	ldd	r5, Y+15	; 0x0f
 69c:	6e 84       	ldd	r6, Y+14	; 0x0e
 69e:	7d 84       	ldd	r7, Y+13	; 0x0d
 6a0:	8c 84       	ldd	r8, Y+12	; 0x0c
 6a2:	9b 84       	ldd	r9, Y+11	; 0x0b
 6a4:	aa 84       	ldd	r10, Y+10	; 0x0a
 6a6:	b9 84       	ldd	r11, Y+9	; 0x09
 6a8:	c8 84       	ldd	r12, Y+8	; 0x08
 6aa:	df 80       	ldd	r13, Y+7	; 0x07
 6ac:	ee 80       	ldd	r14, Y+6	; 0x06
 6ae:	fd 80       	ldd	r15, Y+5	; 0x05
 6b0:	0c 81       	ldd	r16, Y+4	; 0x04
 6b2:	1b 81       	ldd	r17, Y+3	; 0x03
 6b4:	aa 81       	ldd	r26, Y+2	; 0x02
 6b6:	b9 81       	ldd	r27, Y+1	; 0x01
 6b8:	ce 0f       	add	r28, r30
 6ba:	d1 1d       	adc	r29, r1
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	f8 94       	cli
 6c0:	de bf       	out	0x3e, r29	; 62
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	cd bf       	out	0x3d, r28	; 61
 6c6:	ed 01       	movw	r28, r26
 6c8:	08 95       	ret

000006ca <__umulhisi3>:
 6ca:	a2 9f       	mul	r26, r18
 6cc:	b0 01       	movw	r22, r0
 6ce:	b3 9f       	mul	r27, r19
 6d0:	c0 01       	movw	r24, r0
 6d2:	a3 9f       	mul	r26, r19
 6d4:	70 0d       	add	r23, r0
 6d6:	81 1d       	adc	r24, r1
 6d8:	11 24       	eor	r1, r1
 6da:	91 1d       	adc	r25, r1
 6dc:	b2 9f       	mul	r27, r18
 6de:	70 0d       	add	r23, r0
 6e0:	81 1d       	adc	r24, r1
 6e2:	11 24       	eor	r1, r1
 6e4:	91 1d       	adc	r25, r1
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
